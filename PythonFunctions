# step 1: exploratory data analysis--organizing, ploting, computing a few numerical summaries and draw conclusion from data (John Tukey)
# importing data 
import pandas as pd
df_swing = pd.read_csv('2018_swing_states.csv')
df_swing[['state', 'county', 'dem_share']]

####  Chapter 1:  graphical data analysis: histogram, bee swarm plot, ECDF
####  Chapter 1.1 histogram
## use the default settings of Seaborn: a matplotlib based statistical data visualization package
import matplotlib.pyplot as plt
import seaborn as sns
sns.set()

# hostogram: the height of each bar is the number of (y) that had the give level (x)

_ =  plt.hist(df_swing['dem_share']) # pass a column in a dataframe, or a NumPy array
_ = plt.xlabel('percent of vaote for Obama') # always label axes
_ = plt.ylabel('number of counties')
plt.show()

# histogram have binning bias: the same data maybe interpreted differently depending on choice of bins
# not all data is plotted, data are sweeped into bins and loosing their actual values
bin_edges = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
_ =  plt.hist(df_swing['dem_share'], bins = bin_edges) # specifiy bin edges

# A commonly used rule of thumb for choosing number of bins: the "Square root rule"
import numpy as np
#compute number of data points
n_data = len(df_swing['dem_share'])
n_bins = int(np.sqrt(n_data))
_ =  plt.hist(df_swing['dem_share'], bins = n_bins) # or specify the number of bins 

####  Chapter 1.2 bee swarm plot
# plot all of your data: bee swarm plots
_ = sns.swarmplot(x='state', y='dem_share', data = df_swing)
_ = plt.xlabel('state')
_ = plt.ylabel('percent of vote for Obama')
plt.show()

# bee swarm plots have a limit to their efficacy

####  Chapter 1.3 Empirical cumulative distribution function (ECDF) 
In a workflow, it's almost always plot the ECDF first, it shows all the data and give a complete picture of how the data are distributed
# a X-value of ECDF is the quantity you are measuring
# the y_value is the fraction of data points that have a value smaller than the corresponding x-value

imporot numpy as np
### the ecdf function takes a 1D array of data as input and returns the x and y values of the ECDF
def ecdf(data):
    n = len(data)
    x = np.sort(data)
    y = np.arange(1, n+1) /n
    return x, y
    
x , y = ecdf(df_swing['dem_share'])
_ = plt.plot(x, y, marker = '.', linestyle = 'none')
_ = plt.xlabel('percent of vote for Obama')
_ =  plt.ylabel('ECDF')
plt.margins(0.02) # keep data off plot edges
plt.show()

# compare 2 or more distributions using ECDFs
x_set, y_set = ecdf(setosa_petal_length)
x_vers, y_vers = ecdf(versicolor_petal_length)
x_virg, y_virg = ecdf(virginica_petal_length)

# Plot all ECDFs on the same plot
_ = plt.plot(x_set, y_set, marker ='.', linestyle = 'none')
_ = plt.plot(x_vers, y_vers, marker ='.', linestyle = 'none')
_ = plt.plot(x_virg, y_virg, marker ='.', linestyle = 'none')

# Annotate the plot
plt.legend(('setosa', 'versicolor', 'virginica'), loc='lower right')
_ = plt.xlabel('petal length (cm)')
_ = plt.ylabel('ECDF')

# Display the plot
plt.show()

### $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

#### Chapter 2: summary statistics 

#### Chapter 2.1 sample mean and median
# mean: major problem is that it is heavily influenced by outliers
# outliers are data points whose value is far greater or less than most of the rest of the data
import numpy as np
np.mean(dem_share_PA)

# median: the middle value of a data set, a summary statistic that is immune to extreme data
np.median(dem_share_UT)

#### Chapter 2.2 percentiles, outliers and box plots
# computing percentiles
np.percentile(df_swing['dem_share'], [25, 50, 75])

# box plot: The center of the box is the median. 
#           The edges of the boxes are the 25th and 75th percentile. 
#           The total height of the box contains the middle 50% of the data, and is called the interquartile range, or IQR. 
#           The whiskers extend a distance of 1.5 times the IQR, or to the extent of the data, whichever is more extreme.
#           All points outside of the whishers are plotted as individual poitns,, which we often demarcates as outliers

## there is no single defination for an outlier, being more than 2 IQRs away from the median is a common criterion. It's not necessarily erroneous
import matplotlib.pyplot as plt
import seaborn as sns
_ = sns.boxplot(x='east_west', y = 'dem_share', data = df_all_states)
_ = plt.xlabel('region')
_ = plt.ylabel('percent of vote for Obama')
plt.show()

## exercise
percentiles = np.array([2.5, 25, 50, 75, 97.5])
ptiles = np.percentile(versicolor_petal_length, percentiles)
print(ptiles)

# compare percentiles to ECDF
# plot the ECDF
x_vers, y_vers = ecdf(versicolor_petal_length)
_ = plt.plot(x_vers, y_vers, marker = '.', linestyle = 'none')
_ = plt.xlabel('petal length (cm)')
_ = plt.ylabel('ECDF')

# overlay percentiles as red diamnds
_ = plt.plot(ptiles, percentiles/100, marker='D', color = 'red', linestyle = 'none')
plt.show()


#### Chapter 2.3 variance and standard deviation




#goal: computing parameters and their confidence intervals, and do hypothesis tests
